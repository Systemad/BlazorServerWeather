@page "/fetchdata"
@using BlazorServer.Models

@inject WeatherServices Service

<div class="container">

    <div class="row bg-light">
        <table class="table table-bordered">
            <thead class="thead-dark">
                <tr>
                    <th>Weather Id</th>
                    <th>Week Day</th>
                    <th>Temperature</th>
                    <th>Date</th>
                </tr>
            </thead>
            <tbody>
                @if (_weathers.Any())
                {
                    @foreach (var weather in _weathers)
                    {
                        <tr @onclick="(() => SetWeatherForUpdate(weather))">
                            <td>@weather.WeatherId</td>
                            <td>@weather.WeekDay</td>
                            <td>@weather.Temperature</td>
                            <td>@weather.DateTime</td>
                            <td><button class="btn btn-danger" @onclick="(() => DeleteWeather(weather))">Delete</button></td>
                        </tr>
                    }
                }
                else
                {
                    <tr><td colspan="6"><strong>No weather available</strong></td></tr>
                }
            </tbody>
        </table>
    </div>

    <div class="row m-5">
        <div class="col-5 bg-light m-2 justify-content-start">
            <div class="p-3 mb-3 bg-primary text-white text-center">Add New Weather</div>
            <EditForm Model="@NewWeatherDay">
                <div class="form-group">
                    <label for="WeekDay">Weather Day Name</label>
                    <input type="text" id="WeekDay" class="form-control" @bind-value="@NewWeatherDay.WeekDay" />
                </div>

                <div class="form-group">
                    <label for="Temperature">Temperature</label>
                    <input type="text" id="Temperature" class="form-control" @bind="@NewWeatherDay.Temperature" />
                </div>
                
                <div class="text-center p-3 mb-3">
                    <button class="btn btn-info" @onclick="AddNewWeather"> Add Weather</button>
                </div>
            </EditForm>
        </div>

        <div class="col-5 bg-light m-2 justify-content-end">
            <div class="p-3 mb-1 bg-primary text-white text-center">Update Weather</div>

            <EditForm Model="@_updateWeatherDay">
                <div class="form-group">
                    <label for="WeekDay">Weather Day Name</label>
                    <input type="text" id="weekday" class="form-control" @bind-value="@_updateWeatherDay.WeekDay" />
                </div>

                <div class="form-group">
                    <label for="Temperature">Temperature</label>
                    <input type="text" id="temperature" class="form-control" @bind="@_updateWeatherDay.Temperature" />
                </div>

                <div class="text-center p-3 mb-3">
                    <button class="btn btn-info" @onclick="UpdateWeatherData"> Update Weather</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>


@code {

    List<WeatherDay> _weathers = new List<WeatherDay>();

    protected override async Task OnInitializedAsync()
    {
        await RefreshWeathers();
    }

    private async Task RefreshWeathers()
    {
        _weathers = await Service.GetWeatherAsync();
    }


    public WeatherDay NewWeatherDay { get; set; } = new WeatherDay();

    private async Task AddNewWeather()
    {
        NewWeatherDay.DateTime = DateTime.Now;
        await Service.AddWeatherAsync(NewWeatherDay);
        NewWeatherDay = new WeatherDay();
        await RefreshWeathers();
    }

    WeatherDay _updateWeatherDay = new WeatherDay();
    private void SetWeatherForUpdate(WeatherDay weatherDay)
    {
        _updateWeatherDay = weatherDay;
    }

    private async Task UpdateWeatherData()
    {
        await Service.UpdateWeatherAsync(_updateWeatherDay);
        await RefreshWeathers();
    }

    private async Task DeleteWeather(WeatherDay weatherDay)
    {
        await Service.DeleteWeatherAsync(weatherDay);
        await RefreshWeathers();
    }
}
